/*

a subclass is a class that implements the attributes or methods of its parent class, aka superclass

all subclasses can have one superclass but a superclass can have multiple subclasses

a subclass will "inherit" every property of its superclass

when using the extends keyword, it is not possible to "skip" a class in the middle

for example if the classes are linked as a-b-c, c cannot extend a since there is b in the middle

constructors are not inherited unless specified with the keyword super

by default, the constructor of the subclass will call the no argument constructor of its superclass
before proceeding with its own construction of the object of the subclass.

super(arg, arg...); 

the above could be used to call the constructor of the superclass using arguments
it must be in the first line of the constructor since the call hierarchy goes up and it comes 
to the "home" subclass the latest.

a subclass cannot directly access the private data fields of its superclass
needs to use getter or setter functions to access/modify the private variables

in other words, inheritance only works with public properties, not private!

overriding is the process of rewriting a method inherited from a superclass within a subclass
it is only used when method signatures clash.

to call a method from the superclass, the following syntax can be used:

super.method(params)

polymorphism is a design pattern in which a reference variable can refer to an object in its own class
and an object form one of its superclasses. this is especially useful when the type of an object
that would be added to a collection can't be known beforehand. example:

suppose that x, y and z are subclasses of class a

a[] ourList = new a[3];
a[0] = x;

this is perfectly valid since a is being extened by the type/class x and therefore a variable
refering to the type x can be of type a. this would also be true for the types y and z in this example.

to call a method of a polymorphic object from its subclass without its signature existing in the superclass,
we can cast the superclass type variable that references a subclass, to the subclass

for example:

b extends a

b has a method that does not exist in a

if a variable c is declared such that it references type b but has a type of a, to call a method that
does not exist in the superclass a but in the subclass b, we can use (b)a.method

or in a more general way:

(subclass)superclass_var.method

if the same setup with a and b are formed and a method that is explicitly declared in both classes is called,
the one in the subclass will be executed.

if both a and b contain a method named "ysc", b.ysc will call the ysc method belonging to the b class

all classes in java extend the Object superclass

when an object is passed to a print method, a toString method on that object is implicity called
by default, that prints out the object's hashcode. therefore, most of the time the toString
method of a class is overriden to provide more useful properties to its return statement

by default, the equals method checks if the variables refer to the same object instance

overriding this method will allow the programmer to allow for checks within specific data fields
or other comparisons that could be more useful in specific scenarios.

equals method must have a parameter of type Object. Every object instance is also of type Object
since they extend it.

(USEFUL: instanceof operator, returns a bool value by checking if an object is a type of something)


*/